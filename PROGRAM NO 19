#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Stack {
    char* array;
    int top;
    unsigned capacity;
};

struct Stack* createStack(unsigned capacity) {
    struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack));
    if (!stack)
        return NULL;
    stack->top = -1;
    stack->capacity = capacity;
    stack->array = (char*)malloc(stack->capacity * sizeof(char));
    if (!stack->array)
        return NULL;
    return stack;
}

int isFull(struct Stack* stack) {
    return stack->top == stack->capacity - 1;
}

int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

void push(struct Stack* stack, char item) {
    if (isFull(stack))
        return;
    stack->array[++stack->top] = item;
}

char pop(struct Stack* stack) {
    if (isEmpty(stack))
        return '\0';
    return stack->array[stack->top--];
}

int isValid(char* s) {
    struct Stack* stack = createStack(strlen(s));
    if (!stack)
        return 0;
    for (int i = 0; s[i]; i++) {
        if (s[i] == '(' || s[i] == '{' || s[i] == '[')
            push(stack, s[i]);
        else {
            if (isEmpty(stack))
                return 0;
            char top = pop(stack);
            if ((s[i] == ')' && top != '(') || (s[i] == '}' && top != '{') || (s[i] == ']' && top != '['))
                return 0;
        }
    }
    return isEmpty(stack);
}


int main() {
    char* s = "{[()]}"; 
    if (isValid(s))
        printf("Valid\n");
    else
        printf("Not Valid\n");
    return 0;
}
