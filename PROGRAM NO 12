#include <stdio.h>
#include <stdlib.h>


struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
};


int search(int arr[], int start, int end, int target) {
    for (int i = start; i <= end; i++) {
        if (arr[i] == target)
            return i;
    }
    return -1; 
}


struct TreeNode* buildTreeHelper(int* preorder, int preorderStart, int preorderEnd, int* inorder, int inorderStart, int inorderEnd) {
    if (preorderStart > preorderEnd || inorderStart > inorderEnd)
        return NULL;

    struct TreeNode* root = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    root->val = preorder[preorderStart];
    root->left = NULL;
    root->right = NULL;


    int rootIndex = search(inorder, inorderStart, inorderEnd, root->val);
    if (rootIndex == -1)
        return NULL;


    root->left = buildTreeHelper(preorder, preorderStart + 1, preorderStart + rootIndex - inorderStart, inorder, inorderStart, rootIndex - 1);
    root->right = buildTreeHelper(preorder, preorderStart + rootIndex - inorderStart + 1, preorderEnd, inorder, rootIndex + 1, inorderEnd);

    return root;
}


struct TreeNode* buildTree(int* preorder, int preorderSize, int* inorder, int inorderSize) {
    return buildTreeHelper(preorder, 0, preorderSize - 1, inorder, 0, inorderSize - 1);
}


void inorderTraversal(struct TreeNode* root) {
    if (root == NULL)
        return;
    inorderTraversal(root->left);
    printf("%d ", root->val);
    inorderTraversal(root->right);
}


int main() {
    int preorder[] = {3, 9, 20, 15, 7};
    int inorder[] = {9, 3, 15, 20, 7};
    int n = sizeof(preorder) / sizeof(preorder[0]);

    struct TreeNode* root = buildTree(preorder, n, inorder, n);

 
    printf("Inorder traversal of the constructed tree: ");
    inorderTraversal(root);

    return 0;
}
